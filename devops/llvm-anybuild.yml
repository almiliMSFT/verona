parameters:
  # whether to build the release configuration 
  - name: BuildRelease
    type: boolean
    default: true
  # whether to build the debug configuration
  - name: BuildDebug
    type: boolean
    default: true
  # extra command-line args to pass to AnyBuild
  - name: ExtraAnyBuildArgs
    type: string
    default: '--Epoch 1 --WhyCacheMiss --WhyCacheMissOptions CacheDataStoreKey=LLVMVerona'
  # args to pass to cmake when building
  - name: CmakeBuildToolArgs
    type: string
    default: 'install'
  # number of parallel cmake jobs
  - name: CmakeJobs
    type: number
    default: 48
  # whether to publish installed LLVM binaries as a package
  - name: PublishPackage
    type: boolean
    default: false

resources:
  repositories:
  - repository: llvm
    type: github
    endpoint: LLVMServiceConnection
    name: llvm/llvm-project
    trigger: none
  - repository: self
    trigger: none

jobs:
############################################# Linux Builds
- job: LLVM
  displayName: LLVM Linux Build
  pool:
    name: AnyBuild
    demands:
    - Configuration -equals $(BuildType)
  timeoutInMinutes: 120

  variables:
  # - name: GOOD_HASH
  #   value: Must be set in Azure DevOps
  - name: AbClientDirectory
    value: $HOME/.local/share/Microsoft/AnyBuild
  - name: AbDeploymentJson
    value: $HOME/.local/share/AnyBuildDeployment.json
  - name: AbLogsRootDir
    value: $(Build.StagingDirectory)/ab_logs
  - name: LlvmSourceDir
    value: $(Agent.BuildDirectory)/s/llvm-project
  - name: LlvmBuildDir
    value: $(LlvmSourceDir)/build
  - name: AbExpName
    value: LLVMVna
  - name: AbEnvironmentName
    value: LLVMVna
  - name: AbClusterId
    value: 0310c9eb-18d0-4a58-bc85-bdc02a4d764a
  - name: AnyBuildEnvironmentUri
    value: https://northeurope.anybuild-test.microsoft.com/api/clusters/$(AbClusterId)/agents
  - name: AbShimFilter
    value: '@(clang|clang++|*/clang|*/clang++|ar|*/ar|ranlib|*/ranlib|*/llvm-tblgen|*/mlir-tblgen)'

  steps:
  - checkout: llvm

  - script: |
      set -euo pipefail
      if [[ -z $(GOOD_HASH) ]]; then
        echo "[ERROR] Variable 'GOOD_HASH' not set in Azure DevOps pipeline"
        exit 1
      fi
      git checkout $(GOOD_HASH)
    workingDirectory: $(LlvmSourceDir)
    displayName: 'Move tree to known good LLVM commit for Verona'

  - script: |
      set -euo pipefail

      sudo apt-get update
      sudo apt-get install -y clang ninja-build lld jq tree

      # Install latest CMake from snap (must first remove the pre-installed one)
      sudo apt remove -y --purge cmake
      hash -r
      sudo snap install cmake --classic
    displayName: 'Install build dependencies'
    workingDirectory: $(Build.StagingDirectory)

  - bash: |
      set -euo pipefail

      declare AnyBuildSource=https://anybuild$(AbEnvironmentName)neurope.blob.core.windows.net/clientreleases
      declare Ring=Dogfood

      rm -rf $(AbClientDirectory)
      wget -O /tmp/bootstrapper.sh ${AnyBuildSource}/bootstrapper.sh
      chmod +x /tmp/bootstrapper.sh

      /tmp/bootstrapper.sh ${AnyBuildSource} ${Ring}
    displayName: Install AnyBuild client
    workingDirectory: $(Build.StagingDirectory)

  - bash: |
      function log-and-run {
        echo "Running "
        echo "  CWD = $(pwd)"
        echo "  CMD = $@"
        "$@"
      }

      rm -rf "$(LlvmBuildDir)"
      mkdir -p "$(LlvmBuildDir)"
      cd "$(LlvmBuildDir)"
      log-and-run cmake $(LlvmSourceDir)/llvm -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS=-stdlib=libstdc++ -DLLVM_USE_SANITIZER= -DLLVM_ENABLE_PROJECTS="clang;mlir" -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_LLD=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install -DMLIR_INCLUDE_TESTS=OFF
    workingDirectory: $(LlvmSourceDir)
    displayName: CMake

  - bash: |
      function extract_logs {
        local buildDir="$1"
        local logsDir="$2"

        echo 
        echo "====== Extracting logs from '${buildDir}' into '${logsDir}'"
        echo

        rm -rf "$logsDir"
        mkdir "$logsDir"
        mv "$buildDir"/*log "$logsDir"
      }

      function build {
        local time_limit="$1"

        if [[ -z "$(AbExpName)" ]]; then
          echo "ERROR: Variable 'AbExpName' not set"
          return 1
        fi

        if [[ -z "${{ parameters.CmakeJobs }}" ]]; then
          echo "ERROR: Variable 'CmakeJobs' not set"
          return 1
        fi

        echo
        echo "===== Running build (${{ parameters.CmakeJobs }} CMake jobs) up to ${time_limit} from $(pwd)"
        echo

        env -i \
          llvmPassword=$(LLVMPrincipalPassword) \
          HOME="$HOME" \
          PATH="$PATH" \
        timeout "$time_limit" time $(AbClientDirectory)/AnyBuild.sh \
          --RemoteExecServiceUri $(AnyBuildEnvironmentUri) \
          --NoCheckForUpdates \
          --WaitForAgentForever \
          --DoNotUseMachineUtilizationForScheduling \
          --Verbose \
          --RemoteAll \
          --ClientApplicationId $(LLVMPrincipalAppId) \
          --ClientSecretEnvironmentVariable llvmPassword \
          --ShimProcessFilter '$(AbShimFilter)' \
          ${{ parameters.ExtraAnyBuildArgs }} \
          -- \
          $(which cmake) --build . -- -j ${{ parameters.CmakeJobs }} ${{ parameters.CmakeBuildToolArgs }}
      }

      declare failed=0
      build 90m || failed=$?

      extract_logs "$(pwd)" "$(AbLogsRootDir)"

      exit $failed

    workingDirectory: $(LlvmBuildDir)
    displayName: Build LLVM with AnyBuild

  - bash: |
      set -euo pipefail

      for abLogFile in $(find "$(AbLogsRootDir)" -name AnyBuild.log); do
          echo "=== $abLogFile ==="
          sed -n '/Session telemetry: Finished/,$ p' "$abLogFile"
          echo
      done
    workingDirectory: $(LlvmBuildDir)
    continueOnError: true
    condition: always()
    displayName: Print out AnyBuild stats

  - bash: |
      set -euo pipefail
      cd "$(LlvmBuildDir)/install"
      find . -type f | sort | xargs md5sum | tee $(AbLogsRootDir)/llvm-install.anybuild.md5.txt
    workingDirectory: $(LlvmSourceDir)
    displayName: Compute MD5 checksums 

  - bash: |
      function log-and-run {
        echo "Running "
        echo "  CWD = $(pwd)"
        echo "  CMD = $@"
        "$@"
      }

      set -euo pipefail

      rm -rf "$(VeronaBuildDir)"
      mkdir -p "$(VeronaBuildDir)"
      cd "$(VeronaBuildDir)"

      log-and-run cmake                                      \
        $(VeronaSourceDir)                                   \
        -GNinja                                              \
        -DCMAKE_C_COMPILER=gcc                               \
        -DCMAKE_CXX_COMPILER=g++                             \
        -DCMAKE_BUILD_TYPE=$(BuildType)                      \
        -DCMAKE_CXX_FLAGS=                                   \
        -DENABLE_ASSERTS=ON                                  \
        -DUSE_ASAN=$(Asan)                                   \
        -DVERONA_CI_BUILD=ON                                 \
        -DRT_TESTS=ON                                        \
        -DVERONA_EXTERNAL_LLVM_DIR="$(LlvmBuildDir)/install" \
        -DVERONA_DOWNLOAD_LLVM=OFF
    workingDirectory: $(VeronaSourceDir)
    displayName: CMake (Verona)

  - bash: |
      ninja clean
    workingDirectory: $(LlvmBuildDir)
    condition: and(succeeded(), eq(${{ parameters.PublishPackage }}, true))
    displayName: Delete build outputs to free up space for 'Create package'

  - publish: $(AbLogsRootDir)
    displayName: Publish Logs
    artifact: Logs_$(BuildName)
    continueOnError: true
    condition: always()

  - publish: $(LlvmBuildDir)/install
    displayName: Publish Package
    condition: and(succeeded(), eq(${{ parameters.PublishPackage }}, true))
    artifact: llvm-linux

  - script: |
      set -euo pipefail
      echo "Deleting $(LlvmBuildDir)"
      rm -rf "$(LlvmBuildDir)"
    continueOnError: false
    displayName: Clean

- job: Verona
  displayName: Verona Linux
  pool:
    vmImage: 'ubuntu-18.04'
  dependsOn: [ LLVM ]
  timeoutInMinutes: 120
  strategy:
    matrix:
      GCC Debug:
        CC: gcc
        CXX: g++
        CXXFLAGS:
        BuildType: Debug
        Asan: Off
      GCC Release:
        CC: gcc
        CXX: g++
        CXXFLAGS:
        Asan: Off
        BuildType: Release
      Clang Debug:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: Off
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        Asan: Off
        BuildType: Release
      Clang Debug (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: On
      Clang Release (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        Asan: On

  variables:
  - name: VeronaSourceDir
    value: $(Agent.BuildDirectory)/s/verona
  - name: VeronaBuildDir
    value: $(VeronaSourceDir)/build

  steps:
  - checkout: self

  - bash: |
      set -eo pipefail
      git submodule init
      git submodule update --depth 1 --recursive
    workingDirectory: $(VeronaSourceDir)
    displayName: Checkout Verona submodules

  - bash: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y ninja-build
      sudo apt-get remove --purge cmake
      sudo snap install cmake --classic
      sudo pip install wheel OutputCheck
    displayName: 'Dependencies'

  - download: current
    artifact: llvm-linux

  - bash: |
      function log-and-run {
        echo "Running "
        echo "  CWD = $(pwd)"
        echo "  CMD = $@"
        "$@"
      }

      set -euo pipefail

      rm -rf "$(VeronaBuildDir)"
      mkdir -p "$(VeronaBuildDir)"
      cd "$(VeronaBuildDir)"

      log-and-run cmake                 \
        $(VeronaSourceDir)              \
        -GNinja                         \
        -DCMAKE_C_COMPILER=$(CC)        \
        -DCMAKE_CXX_COMPILER=$(CXX)     \
        -DCMAKE_BUILD_TYPE=$(BuildType) \
        -DCMAKE_CXX_FLAGS=$(CXXFLAGS)   \
        -DENABLE_ASSERTS=ON             \
        -DUSE_ASAN=$(Asan)              \
        -DVERONA_CI_BUILD=ON            \
        -DRT_TESTS=ON                   \
        -DVERONA_DOWNLOAD_LLVM=OFF      \
        -DVERONA_EXTERNAL_LLVM_DIR="$(Pipeline.Workspace)/llvm-linux"
    workingDirectory: $(VeronaSourceDir)
    displayName: CMake

  - bash: |
      set -eo pipefail
      ninja
    workingDirectory: $(VeronaBuildDir)
    displayName: Compile

  - bash: |
      set -eo pipefail
      export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-6.0/bin/llvm-symbolizer
      export ASAN_OPTIONS="alloc_dealloc_mismatch=0 symbolize=1"
      ninja check
    workingDirectory: $(VeronaBuildDir)
    displayName: Tests