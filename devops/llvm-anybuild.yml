parameters:
  # whether to build on Linux
  - name: BuildLinux
    type: boolean
    default: true
  # whether to build on Windows
  - name: BuildWindows
    type: boolean
    default: true
  # extra command-line args to pass to AnyBuild
  - name: ExtraAnyBuildArgs
    type: string
    default: '--WhyCacheMiss --WhyCacheMissOptions CacheDataStoreKey=LLVMVerona'
  # number of parallel cmake jobs
  - name: CmakeJobs
    type: number
    default: 48

variables:
- name: AbEnvironmentName
  value: LLVMVna
- name: AbClusterId
  value: 0310c9eb-18d0-4a58-bc85-bdc02a4d764a
- name: AnyBuildEnvironmentUri
  value: https://northeurope.anybuild-test.microsoft.com/api/clusters/$(AbClusterId)/agents
- name: AnyBuildSource
  value: https://anybuild$(AbEnvironmentName)neurope.blob.core.windows.net/clientreleases
- name: AnyBuildRing
  value: Dogfood
# - name: GOOD_HASH
#   value: Must be set in Azure DevOps

resources:
  repositories:
  - repository: llvm
    type: github
    endpoint: LLVMServiceConnection
    name: llvm/llvm-project
    trigger: none
  - repository: self
    trigger: none

jobs:
############################################# Windows Builds
- job: LLVM_Windows
  displayName: LLVM Windows
  condition: ${{ eq(parameters.BuildWindows, true) }}
  pool:
    name: AnyBuild
    demands:
    - Agent.OS -equals Windows_NT
  timeoutInMinutes: 120
  strategy:
    matrix:
      Release:
        BuildType: Release
        BuildName: release
  variables:
  - name: AbLogsRootDir
    value: $(Build.StagingDirectory)\ab_logs

  steps:
  - checkout: llvm

  - powershell: |
      Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    displayName: 'Install Choco'

  - powershell: |
      C:\ProgramData\chocolatey\bin\choco install --accept-license -y cmake ninja
    displayName: Install CMake

  - powershell: |
      Set-ExecutionPolicy Bypass -Scope Process -Force

      Remove-Item -Force -Recurse "$env:LOCALAPPDATA\Microsoft\AnyBuild" -ea SilentlyContinue

      Invoke-Command -ScriptBlock ([scriptblock]::Create((New-Object System.Net.WebClient).DownloadString("$(AnyBuildSource)/bootstrapper.ps1"))) -ArgumentList ("$(AnyBuildSource)", "$(AnyBuildRing)")
    displayName: Install AnyBuild

  - script: |
      git checkout main
      git pull
      git checkout $(GOOD_HASH)
    displayName: Prepare Tree

  # TODO: add 'clang' to LLVM_ENABLE_PROJECTS
  - script: |
      rd /s /q build
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
      mkdir build
      cd build
      "C:\Program Files\CMake\bin\cmake.exe" ..\llvm -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DLLVM_ENABLE_PROJECTS="mlir" -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install -DMLIR_INCLUDE_TESTS=OFF
    displayName: CMake

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
      cd build

      set ServicePrincipalPassword=$(LLVMPrincipalPassword)
      call "%LOCALAPPDATA%\Microsoft\AnyBuild\AnyBuild.cmd" --EnableActionCache ${{ parameters.ExtraAnyBuildArgs }} --RemoteExecServiceUri $(AnyBuildEnvironmentUri) --ClientApplicationId $(LLVMPrincipalAppId) --ClientSecretEnvironmentVariable ServicePrincipalPassword --WaitForAgentForever --DoNotUseMachineUtilizationForScheduling --Verbose -- "C:\ProgramData\chocolatey\lib\ninja\tools\ninja.exe" -j24 install
    displayName: Compile

  - publish: build/install
    displayName: Publish Package
    artifact: llvm-windows-$(BuildName)

  - script: |
      rd /s /q $(AbLogsRootDir)
      mkdir $(AbLogsRootDir)
      move *.log $(AbLogsRootDir)
    workingDirectory: build
    continueOnError: true
    condition: always()
    displayName: Extract AnyBuild Logs

  - publish: $(AbLogsRootDir)
    displayName: Publish Logs
    artifact: AnyBuildLogs-llvm-windows-$(BuildName)
    continueOnError: true
    condition: always()

- job: Verona_Windows
  displayName: Verona Windows
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  dependsOn: [ LLVM_Windows ]
  strategy:
    matrix:
      RelWithDebInfo:
        CXXFLAGS: '/EHsc /D _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING=1'
        BuildType: RelWithDebInfo
      Release:
        CXXFLAGS: '/EHsc /D _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING=1'
        BuildType: Release

  steps:
  - checkout: self

  - script: |
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: Checkout Submodules

  - script:
      pip install OutputCheck
    displayName: Dependencies

  - download: current
    artifact: llvm-windows-release

  - script: |
      mkdir build
      cd build
      cmake .. -G"Visual Studio 16 2019" -DENABLE_ASSERTS=ON -DVERONA_CI_BUILD=On -DRT_TESTS=ON -DCMAKE_CXX_FLAGS="$(CXXFLAGS)" -DVERONA_DOWNLOAD_LLVM=OFF -DVERONA_EXTERNAL_LLVM_DIR=$(Pipeline.Workspace)\llvm-windows-release
    displayName: 'CMake'

  - task: MSBuild@1
    displayName: Compile
    inputs:
      solution: build/verona.sln
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

  - task: MSBuild@1
    displayName: 'Test'
    inputs:
      solution: build/check.vcxproj
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

############################################# Linux Builds
- job: LLVM_Linux
  displayName: LLVM Linux
  condition: ${{ eq(parameters.BuildLinux, true) }}
  # pool:
  #   vmImage: 'ubuntu-18.04'
  pool:
    name: AnyBuild
    demands:
    - Configuration -equals Release
    - Agent.OS -equals Linux
  timeoutInMinutes: 120
  strategy:
    matrix:
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        BuildName: release
        Sanitizer:

  variables:
  - name: AbClientDirectory
    value: $HOME/.local/share/Microsoft/AnyBuild
  - name: AbDeploymentJson
    value: $HOME/.local/share/AnyBuildDeployment.json
  - name: AbLogsRootDir
    value: $(Build.StagingDirectory)/ab_logs
  - name: LlvmSourceDirRelativePath
    value: s/llvm-project
  - name: LlvmSourceDir
    value: $(Agent.BuildDirectory)/$(LlvmSourceDirRelativePath)
  - name: LlvmBuildDir
    value: $(LlvmSourceDir)/build
  - name: AbShimFilter
    value: '@(clang|clang++|*/clang|*/clang++|ar|*/ar|ranlib|*/ranlib|*/llvm-tblgen|*/mlir-tblgen)'

  steps:
  - checkout: llvm
    path: $(LlvmSourceDirRelativePath)

  - script: |
      set -euo pipefail
      if [[ -z $(GOOD_HASH) ]]; then
        echo "[ERROR] Variable 'GOOD_HASH' not set in Azure DevOps pipeline"
        exit 1
      fi
      git checkout $(GOOD_HASH)
    workingDirectory: $(LlvmSourceDir)
    displayName: 'Move tree to known good LLVM commit for Verona'

  - script: |
      set -euo pipefail

      sudo apt-get update
      sudo apt-get install -y clang ninja-build lld jq tree

      # Install latest CMake from snap (must first remove the pre-installed one)
      sudo apt remove -y --purge cmake
      hash -r
      sudo snap install cmake --classic
    displayName: 'Install build dependencies'
    workingDirectory: $(Build.StagingDirectory)

  - bash: |
      set -euo pipefail

      declare 
      declare AnyBuildRing=Dogfood

      rm -rf $(AbClientDirectory)
      wget -O /tmp/bootstrapper.sh $(AnyBuildSource)/bootstrapper.sh
      chmod +x /tmp/bootstrapper.sh

      /tmp/bootstrapper.sh $(AnyBuildSource) $(AnyBuildRing)
    displayName: Install AnyBuild client
    workingDirectory: $(Build.StagingDirectory)

  - bash: |
      function log-and-run {
        echo "Running "
        echo "  CWD = $(pwd)"
        echo "  CMD = $@"
        "$@"
      }

      rm -rf "$(LlvmBuildDir)"
      mkdir -p "$(LlvmBuildDir)"
      cd "$(LlvmBuildDir)"
      log-and-run cmake $(LlvmSourceDir)/llvm \
        -GNinja                               \
        -DCMAKE_BUILD_TYPE=$(BuildType)       \
        -DCMAKE_C_COMPILER=$(CC)              \
        -DCMAKE_CXX_COMPILER=$(CXX)           \
        -DCMAKE_CXX_FLAGS=$(CXXFLAGS)         \
        -DLLVM_USE_SANITIZER=$(Sanitizer)     \
        -DLLVM_ENABLE_PROJECTS="clang;mlir"   \
        -DLLVM_TARGETS_TO_BUILD="X86"         \
        -DLLVM_ENABLE_ASSERTIONS=ON           \
        -DLLVM_ENABLE_LLD=ON                  \
        -DLLVM_ENABLE_EH=ON                   \
        -DLLVM_ENABLE_RTTI=ON                 \
        -DCMAKE_INSTALL_PREFIX=install        \
        -DMLIR_INCLUDE_TESTS=OFF
    workingDirectory: $(LlvmSourceDir)
    displayName: CMake

  - bash: |
      declare time_limit="90m"

      echo "===== Running build (${{ parameters.CmakeJobs }} CMake jobs) up to ${time_limit} from $(pwd)"
      echo

      env -i                                                      \
        llvmPassword=$(LLVMPrincipalPassword)                     \
        HOME="$HOME"                                              \
        PATH="$PATH"                                              \
      timeout "$time_limit" time $(AbClientDirectory)/AnyBuild.sh \
        --RemoteExecServiceUri $(AnyBuildEnvironmentUri)          \
        --NoCheckForUpdates                                       \
        --WaitForAgentForever                                     \
        --DoNotUseMachineUtilizationForScheduling                 \
        --Verbose                                                 \
        --RemoteAll                                               \
        --ClientApplicationId $(LLVMPrincipalAppId)               \
        --ClientSecretEnvironmentVariable llvmPassword            \
        --ShimProcessFilter '$(AbShimFilter)'                     \
        ${{ parameters.ExtraAnyBuildArgs }}                       \
        -- \
        cmake --build . -- -j ${{ parameters.CmakeJobs }} install
    workingDirectory: $(LlvmBuildDir)
    displayName: Build with AnyBuild
  
  - bash: |
      set -euo pipefail

      rm -rf "$(AbLogsRootDir)"
      mkdir "$(AbLogsRootDir)"
      mv -v *.log "$(AbLogsRootDir)/"

      echo "=== AnyBuild stats ==="
      sed -n '/Session telemetry: Finished/,$ p' "$(AbLogsRootDir)/AnyBuild.log"
    workingDirectory: $(LlvmBuildDir)
    continueOnError: true
    condition: always()
    displayName: Extract AnyBuild Logs

  - bash: |
      ninja clean
    workingDirectory: $(LlvmBuildDir)
    displayName: Delete build outputs to free up space for 'Create package'

  - publish: $(AbLogsRootDir)
    displayName: Publish Logs
    artifact: AnyBuildLogs-llvm-linux-$(BuildName)
    continueOnError: true
    condition: always()

  - bash: |
      set -euo pipefail

      tar --sort=name -cf install.tar install

      echo "Created archive $(pwd)/install.tar with MD5 checksum"
      md5sum install.tar
    workingDirectory: $(LlvmBuildDir)
    displayName: Create Package

  - publish: $(LlvmBuildDir)/install.tar
    displayName: Publish Package
    artifact: llvm-linux-$(BuildName)

  - script: |
      set -euo pipefail
      echo "Deleting $(LlvmBuildDir)"
      rm -rf "$(LlvmBuildDir)"
    continueOnError: false
    displayName: Clean

- job: Verona_Linux
  displayName: Verona Linux
  dependsOn: [ LLVM_Linux ]
  pool:
    vmImage: 'ubuntu-18.04'
  timeoutInMinutes: 120
  strategy:
    matrix:
      GCC Debug:
        CC: gcc
        CXX: g++
        CXXFLAGS:
        BuildType: Debug
        Asan: OFF
      GCC Release:
        CC: gcc
        CXX: g++
        CXXFLAGS:
        Asan: OFF
        BuildType: Release
      Clang Debug:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: OFF
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        Asan: OFF
        BuildType: Release
      Clang Debug (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: ON
      Clang Release (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        Asan: ON

  variables:
  - name: VeronaSourceDirRelativePath
    value: s/verona
  - name: VeronaSourceDir
    value: $(Agent.BuildDirectory)/$(VeronaSourceDirRelativePath)
  - name: VeronaBuildDir
    value: $(VeronaSourceDir)/build
  - name: LlvmLinuxDownloadDir
    value: $(Pipeline.Workspace)/llvm-linux-release

  steps:
  - checkout: self
    path: $(VeronaSourceDirRelativePath)

  - download: current
    artifact: llvm-linux-release

  - bash: |
      set -euo pipefail
      tar xvf install.tar
    workingDirectory: $(LlvmLinuxDownloadDir)
    displayName: Extract

  - bash: |
      set -euo pipefail
      git submodule init
      git submodule update --depth 1 --recursive
    workingDirectory: $(VeronaSourceDir)
    displayName: Checkout Submodules

  - bash: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y ninja-build
      sudo apt-get remove --purge cmake
      sudo snap install cmake --classic
      sudo pip install wheel OutputCheck
    displayName: Dependencies

  - bash: |
      function log-and-run {
        echo "Running "
        echo "  CWD = $(pwd)"
        echo "  CMD = $@"
        "$@"
      }

      set -euo pipefail

      rm -rf "$(VeronaBuildDir)"
      mkdir -p "$(VeronaBuildDir)"
      cd "$(VeronaBuildDir)"

      log-and-run cmake                 \
        $(VeronaSourceDir)              \
        -GNinja                         \
        -DCMAKE_C_COMPILER=$(CC)        \
        -DCMAKE_CXX_COMPILER=$(CXX)     \
        -DCMAKE_BUILD_TYPE=$(BuildType) \
        -DCMAKE_CXX_FLAGS=$(CXXFLAGS)   \
        -DENABLE_ASSERTS=ON             \
        -DUSE_ASAN=$(Asan)              \
        -DVERONA_CI_BUILD=ON            \
        -DRT_TESTS=ON                   \
        -DVERONA_DOWNLOAD_LLVM=OFF      \
        -DVERONA_EXTERNAL_LLVM_DIR="$(LlvmLinuxDownloadDir)/install"
    workingDirectory: $(VeronaSourceDir)
    displayName: CMake

  - bash: |
      set -eo pipefail
      ninja
    workingDirectory: $(VeronaBuildDir)
    displayName: Compile

  - bash: |
      set -eo pipefail
      env \
        ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-6.0/bin/llvm-symbolizer \
        ASAN_OPTIONS="alloc_dealloc_mismatch=0 symbolize=1" \
      ninja check
    workingDirectory: $(VeronaBuildDir)
    displayName: Tests