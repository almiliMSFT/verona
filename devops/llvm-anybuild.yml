parameters:
  # whether to build on Linux
  - name: BuildOnLinux
    type: boolean
    default: true
  # whether to build on Windows
  - name: BuildOnWindows
    type: boolean
    default: true
  # whether to build on MacOS
  - name: BuildOnMacOs
    type: boolean
    default: false
  # whether to build Verona
  - name: UploadPackage
    type: boolean
    default: false
  # extra command-line args to pass to AnyBuild
  - name: ExtraAnyBuildArgs
    type: string
    default: --Verbose --WhyCacheMiss --WhyCacheMissOptions CacheDataStoreKey=LLVMVerona
  # number of parallel cmake jobs when building LLVM on Linux
  - name: CmakeJobsLinux
    type: number
    default: 48
  # number of parallel cmake jobs when building LLVM on Windows
  - name: CmakeJobsWindows
    type: number
    default: 24

resources:
  repositories:
  - repository: self
  - repository: llvm
    type: github
    endpoint: LLVMServiceConnection
    name: llvm/llvm-project

schedules:
- cron: "0 3 * * *" # this is 3am UTC
  displayName: Nightly AnyBuild LLVM Build
  always: true
  branches:
    include:
    - master

variables:
- name: AbEnvironmentName
  value: LLVMVna
- name: AbClusterId
  value: 0310c9eb-18d0-4a58-bc85-bdc02a4d764a
- name: AnyBuildEnvironmentUri
  value: https://northeurope.anybuild-test.microsoft.com/api/clusters/$(AbClusterId)/agents
- name: AnyBuildSource
  value: https://anybuild$(AbEnvironmentName)neurope.blob.core.windows.net/clientreleases
- name: AnyBuildRing
  value: Dogfood
- name: VeronaRepoGitUri
  value: https://github.com/microsoft/verona
- name: LlvmRepoGitUri
  value: https://github.com/llvm/llvm-project
# GOOD_HASH may be set in the pipeline in which case it overrides LLVM_COMMIT 
# - name: GOOD_HASH
#   value: ''

jobs:
### Configure: Determine commits to build
###   - outputs VERONA_COMMIT and LLVM_COMMIT that correspond to the latest checked in change in verona@master
- job: Configure
  displayName: Configure LLVM/Verona commits to build
  pool:
    vmImage: ubuntu-18.04
  timeoutInMinutes: 5
  steps:
  - checkout: self

  - bash: |
      set -euo pipefail

      VERONA_COMMIT=$(git rev-parse HEAD)
      if [[ -z "$(GOOD_HASH)" ]]; then
        LLVM_COMMIT=$(git submodule | grep llvm-project | cut -f1 -d\ | sed 's/^.//g')
      else
        LLVM_COMMIT="$(GOOD_HASH)"
      fi

      echo "Setting the following output variables:"
      echo "  VERONA_COMMIT=$VERONA_COMMIT"
      echo "  LLVM_COMMIT=$LLVM_COMMIT"
      echo "##vso[task.setvariable variable=VERONA_COMMIT;isOutput=true;]$VERONA_COMMIT"
      echo "##vso[task.setvariable variable=LLVM_COMMIT;isOutput=true;]$LLVM_COMMIT"
    displayName: SetCommits
    name: SetCommits

############################################# Windows Builds

### Build LLVM with AnyBuild first
- job: LLVM_Windows
  displayName: LLVM Windows
  condition: and(succeeded(), ${{ eq(parameters.BuildOnWindows, true) }})
  dependsOn: [ Configure ]
  pool:
    vmImage: windows-2019
  timeoutInMinutes: 120
  strategy:
    matrix:
      Release:
        BuildType: Release
        BuildName: release
  variables:
  - name: AbLogsRootDir
    value: $(Build.StagingDirectory)\ab_logs
  - name: LlvmSourceDir
    value: $(Agent.BuildDirectory)\s
  - name: LlvmBuildDir
    value: $(LlvmSourceDir)\build
  - name: LLVM_COMMIT
    value: $[ dependencies.Configure.outputs['SetCommits.LLVM_COMMIT'] ]
  - name: PKG_NAME
    value: verona-llvm-install-x86_64-windows-$(BuildName)-$(LLVM_COMMIT)

  steps:
  - checkout: none
  - template: ./steps/git-shallow-clone.yml
    parameters:
      RepoUri: $(LlvmRepoGitUri)
      TargetDir: $(LlvmSourceDir)
      CommitSha: $(LLVM_COMMIT)

  - powershell: |
      Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    displayName: Install Choco

  - powershell: |
      C:\ProgramData\chocolatey\bin\choco install --accept-license -y ninja
    displayName: Install Ninja

  - powershell: |
      Set-ExecutionPolicy Bypass -Scope Process -Force

      Remove-Item -Force -Recurse "$env:LOCALAPPDATA\Microsoft\AnyBuild" -ea SilentlyContinue

      Invoke-Command -ScriptBlock ([scriptblock]::Create((New-Object System.Net.WebClient).DownloadString("$(AnyBuildSource)/bootstrapper.ps1"))) -ArgumentList ("$(AnyBuildSource)", "$(AnyBuildRing)")
    displayName: Install AnyBuild

  - script: |
      rd /s /q build
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      mkdir build
      cd build
      cmake ..\llvm -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DLLVM_ENABLE_PROJECTS="clang;mlir" -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install -DMLIR_INCLUDE_TESTS=OFF -Wno-dev
    displayName: CMake

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      cd build

      set "COMPUTERNAME="
      set "LOGONSERVER="
      set "NUMBER_OF_PROCESSORS="
      set "PROCESSOR_IDENTIFIER="
      set "PROCESSOR_REVISION="
      set "USERDOMAIN="
      set "USERDOMAIN_ROAMINGPROFILE="

      set ServicePrincipalPassword=$(LLVMPrincipalPassword)
      call "%LOCALAPPDATA%\Microsoft\AnyBuild\AnyBuild.cmd" --EnableActionCache ${{ parameters.ExtraAnyBuildArgs }} --RemoteExecServiceUri $(AnyBuildEnvironmentUri) --ClientApplicationId $(LLVMPrincipalAppId) --ClientSecretEnvironmentVariable ServicePrincipalPassword --WaitForAgentForever --DoNotUseMachineUtilizationForScheduling -- "C:\ProgramData\chocolatey\lib\ninja\tools\ninja.exe" -j ${{ parameters.CmakeJobsWindows }} install
    displayName: Compile

  # - script: |
  #     rd /s /q $(AbLogsRootDir)
  #     mkdir $(AbLogsRootDir)
  #     move *.log $(AbLogsRootDir)
  #   workingDirectory: build
  #   continueOnError: true
  #   condition: always()
  #   displayName: Extract AnyBuild Logs
  
  - bash: |
      set -euo pipefail

      rm -rf "$(AbLogsRootDir)"
      mkdir "$(AbLogsRootDir)"
      mv -v *.log "$(AbLogsRootDir)"

      echo "=== AnyBuild stats ==="
      sed -n '/Session telemetry: Finished/,$ p' "$(AbLogsRootDir)/AnyBuild.log"
    workingDirectory: $(LlvmBuildDir)
    continueOnError: true
    condition: always()
    displayName: Extract AnyBuild Logs

  # - publish: $(AbLogsRootDir)
  #   displayName: Publish Logs
  #   artifact: AnyBuildLogs-llvm-windows-$(BuildName)-$(Build.BuildId)
  #   continueOnError: true
  #   condition: always()

  - script: |
      rd /s /q $(PKG_NAME).tar.gz
      tar.exe -z -c -f $(PKG_NAME).tar.gz build/install
    displayName: Create Package
    condition: and(succeeded(), ${{ eq(parameters.UploadPackage, true) }})

  - powershell:
      Get-FileHash $(PKG_NAME).tar.gz -Algorithm MD5 | Select-Object Hash | Format-Wide > $(PKG_NAME).tar.gz.md5
    displayName: Create MD5
    condition: and(succeeded(), ${{ eq(parameters.UploadPackage, true) }})

  - script: |
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz --name $(PKG_NAME) --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: Upload package
    condition: and(succeeded(), ${{ eq(parameters.UploadPackage, true) }})

  - script: |
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz.md5 --name $(PKG_NAME).md5 --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: Upload MD5
    condition: and(succeeded(), ${{ eq(parameters.UploadPackage, true) }})

############################################# Linux Builds

### Build LLVM with AnyBuild first
- job: LLVM_Linux
  displayName: LLVM Linux
  condition: and(succeeded(), ${{ eq(parameters.BuildOnLinux, true) }})
  dependsOn: [ Configure ]
  pool:
    vmImage: ubuntu-18.04
  timeoutInMinutes: 120
  strategy:
    matrix:
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        BuildName: release
        Sanitizer:

  variables:
  - name: AbClientDirectory
    value: $HOME/.local/share/Microsoft/AnyBuild
  - name: AbDeploymentJson
    value: $HOME/.local/share/AnyBuildDeployment.json
  - name: AbLogsRootDir
    value: $(Build.StagingDirectory)/ab_logs
  - name: LlvmSourceDir
    value: $(Agent.BuildDirectory)/s
  - name: LlvmBuildDir
    value: $(LlvmSourceDir)/build
  - name: LLVM_COMMIT
    value: $[ dependencies.Configure.outputs['SetCommits.LLVM_COMMIT'] ]
  - name: PKG_NAME
    value: verona-llvm-install-x86_64-linux-$(BuildName)-$(LLVM_COMMIT)

  steps:
  - checkout: none
  - template: ./steps/git-shallow-clone.yml
    parameters:
      RepoUri: $(LlvmRepoGitUri)
      TargetDir: $(LlvmSourceDir)
      CommitSha: $(LLVM_COMMIT)

  - script: |
      set -euo pipefail

      sudo apt-get update
      sudo apt-get install -y clang ninja-build lld jq tree

      # Install latest CMake from snap (must first remove the pre-installed one)
      sudo apt remove -y --purge cmake
      sudo snap install cmake --classic
    displayName: Install Prerequisites

  - bash: |
      set -euo pipefail

      echo "=== Downloading AnyBuild from $(AnyBuildSource)"
      wget -O- $(AnyBuildSource)/bootstrapper.sh | bash -s $(AnyBuildSource) $(AnyBuildRing)
    displayName: Install AnyBuild Client

  - bash: |
      function log-and-run {
        echo "Running "
        echo "  CWD = $(pwd)"
        echo "  CMD = $@"
        "$@"
      }

      rm -rf "$(LlvmBuildDir)"
      mkdir -p "$(LlvmBuildDir)"
      cd "$(LlvmBuildDir)"
      log-and-run cmake $(LlvmSourceDir)/llvm \
        -GNinja                               \
        -DCMAKE_BUILD_TYPE=$(BuildType)       \
        -DCMAKE_C_COMPILER=$(CC)              \
        -DCMAKE_CXX_COMPILER=$(CXX)           \
        -DCMAKE_CXX_FLAGS=$(CXXFLAGS)         \
        -DLLVM_USE_SANITIZER=$(Sanitizer)     \
        -DLLVM_ENABLE_PROJECTS="clang;mlir"   \
        -DLLVM_TARGETS_TO_BUILD="X86"         \
        -DLLVM_ENABLE_ASSERTIONS=ON           \
        -DLLVM_ENABLE_LLD=ON                  \
        -DLLVM_ENABLE_EH=ON                   \
        -DLLVM_ENABLE_RTTI=ON                 \
        -DCMAKE_INSTALL_PREFIX=install        \
        -DMLIR_INCLUDE_TESTS=OFF              \
        -Wno-dev
    workingDirectory: $(LlvmSourceDir)
    displayName: CMake

  - bash: |
      declare time_limit="90m"

      echo "===== Running build (${{ parameters.CmakeJobsLinux }} CMake jobs) up to ${time_limit} from $(pwd)"
      echo

      env -i                                                      \
        llvmPassword=$(LLVMPrincipalPassword)                     \
        HOME="$HOME"                                              \
        PATH="$PATH"                                              \
      timeout "$time_limit" time $(AbClientDirectory)/AnyBuild.sh \
        --RemoteExecServiceUri $(AnyBuildEnvironmentUri)          \
        --NoCheckForUpdates                                       \
        --WaitForAgentForever                                     \
        --DoNotUseMachineUtilizationForScheduling                 \
        --ClientApplicationId $(LLVMPrincipalAppId)               \
        --ClientSecretEnvironmentVariable llvmPassword            \
        ${{ parameters.ExtraAnyBuildArgs }}                       \
        -- \
        cmake --build . -- -j ${{ parameters.CmakeJobsLinux }} install
    workingDirectory: $(LlvmBuildDir)
    displayName: Build with AnyBuild
  
  - bash: |
      set -euo pipefail

      rm -rf "$(AbLogsRootDir)"
      mkdir "$(AbLogsRootDir)"
      mv -v *.log "$(AbLogsRootDir)"

      echo "=== AnyBuild stats ==="
      sed -n '/Session telemetry: Finished/,$ p' "$(AbLogsRootDir)/AnyBuild.log"
    workingDirectory: $(LlvmBuildDir)
    continueOnError: true
    condition: always()
    displayName: Extract AnyBuild Logs

  - bash: |
      ninja clean
    workingDirectory: $(LlvmBuildDir)
    displayName: Delete Build Outputs (to free up space for 'Create package')

  # - publish: $(AbLogsRootDir)
  #   displayName: Publish Logs
  #   artifact: AnyBuildLogs-llvm-linux-$(BuildName)-$(Build.BuildId)
  #   continueOnError: true
  #   condition: always()

  - bash: |
      set -euo pipefail

      rm -f $(PKG_NAME).tar.gz
      tar zcf $(PKG_NAME).tar.gz build/install
      md5 -r $(PKG_NAME).tar.gz | awk '{print $1}' > $(PKG_NAME).tar.gz.md5
    workingDirectory: $(LlvmSourceDir)
    displayName: Create Package
    condition: and(succeeded(), ${{ eq(parameters.UploadPackage, true) }})

  - script: |
      set -eo pipefail
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz --name $(PKG_NAME) --connection-string "$(BLOB_CONNECTION_STRING)"
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz.md5 --name $(PKG_NAME).md5 --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: Upload Package
    condition: and(succeeded(), ${{ eq(parameters.UploadPackage, true) }})

############################################## MacOS Builds
- job: LLVM_MacOs
  displayName: LLVM MacOS Build
  condition: and(succeeded(), ${{ eq(parameters.BuildOnMacOs, true) }})
  dependsOn: [ Configure ]
  pool:
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 240
  strategy:
    matrix:
      Release:
        BuildType: Release
        BuildName: release
  variables:
  - name: LlvmSourceDir
    value: $(Agent.BuildDirectory)/s
  - name: LLVM_COMMIT
    value: $[ dependencies.Configure.outputs['SetCommits.LLVM_COMMIT'] ]
  - name: PKG_NAME
    value: verona-llvm-install-x86_64-darwin-$(BuildName)-$(LLVM_COMMIT)
  steps:
  - checkout: none
  - template: ./steps/git-shallow-clone.yml
    parameters:
      RepoUri: $(LlvmRepoGitUri)
      TargetDir: $(LlvmSourceDir)
      CommitSha: $(LLVM_COMMIT)

  - script: |
      set -eo pipefail
      git checkout main
      git pull
      git checkout $(LLVM_COMMIT)
    displayName: 'Move tree to known good LLVM commit for Verona'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ../llvm -DCMAKE_BUILD_TYPE=$(BuildType) -DLLVM_ENABLE_PROJECTS="clang;mlir" -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install -DMLIR_INCLUDE_TESTS=OFF -Wno-dev

  - script: |
      set -eo pipefail
      N=$(sysctl -n hw.ncpu)
      make -j $N install
    workingDirectory: build
    displayName: 'Compile LLVM & MLIR'

  - script: |
      set -eo pipefail
      rm -f $(PKG_NAME).tar.gz
      tar zcf $(PKG_NAME).tar.gz build/install
      md5 -r $(PKG_NAME).tar.gz | awk '{print $1}' > $(PKG_NAME).tar.gz.md5
    displayName: 'Create package'

  - script: |
      set -eo pipefail
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz --name $(PKG_NAME) --connection-string "$(BLOB_CONNECTION_STRING)"
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz.md5 --name $(PKG_NAME).md5 --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: 'Upload package'
